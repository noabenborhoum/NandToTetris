// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not(in = instruction[15], out = Ainstruction); // checking if we are on A-instruction or in C-instruction
    Mux16(a = instruction , b = outALU , sel = ALUtoA , out = outMux1);
    And(a = instruction[15] , b = instruction[5] , out = ALUtoA);
    Or(a = Ainstruction, b = ALUtoA, out = loadA);
    ARegister(in = outMux1 , load = loadA , out = outRegisterA , out[0..14] = addressM);
    Mux16(a = outRegisterA , b = inM , sel = instruction[12] , out = outMux2);
    And(a = instruction[15], b = instruction[4] , out = loadD);
    DRegister(in = outALU , load = loadD , out = outRegisterD);
    ALU(x = outRegisterD ,y = outMux2 ,zx = instruction[11],nx = instruction[10],zy = instruction[9],ny = instruction[8],f = instruction[7],no = instruction[6], out = outALU, out = outM, zr = zr, ng = ng);
    And(a = instruction[15] , b = instruction[3] , out = writeM);
    Or(a = zr, b = ng, out = zeroNegative);
    Not(in = zeroNegative, out = positive);
    And(a = instruction[0] , b = positive , out = JGT);
    And(a = instruction[1] , b = zr , out = JEQ);
    And(a = instruction[2] , b = ng , out = JLT);
    Or(a = JLT , b = JEQ , out = JLE);
    Or(a = JGT, b = JLE, out = JMP);
    And(a = instruction[15] , b = JMP , out = loadPC);
    Not(in = loadPC , out = PCinc);
    PC(in = outRegisterA, inc = PCinc, load = loadPC, reset = reset, out[0..14] = pc);
}
